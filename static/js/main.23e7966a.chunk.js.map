{"version":3,"sources":["Movie.js","App.js","reportWebVitals.js","index.js"],"names":["Movie","key","year","title","summary","poster","genres","className","src","alt","map","genre","i","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","console","log","id","setState","this","movie","medium_cover_image","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAsBeA,MAnBf,YAAuD,IAAvCC,EAAsC,EAAtCA,IAAIC,EAAkC,EAAlCA,KAAKC,EAA6B,EAA7BA,MAAMC,EAAuB,EAAvBA,QAAQC,EAAe,EAAfA,OAAOC,EAAQ,EAARA,OAC1C,OACI,sBAAKC,UAAU,QAAf,UACK,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,sBAAMI,UAAU,cAAhB,SAA8B,6BAAKL,MACnC,qBAAKK,UAAU,gBAAeC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IAC9D,qBAAKI,UAAU,gBAAf,SAAgCD,EAAOI,KAAI,SAACC,EAAMC,GAAK,OAAO,6BAAaD,GAAJC,QACvE,sBAAKL,UAAU,iBAAf,UAAiCH,EAAQS,MAAM,EAAE,KAAjD,WALuBZ,I,iBC0DrBa,E,4MAvDbC,MAAM,CACJC,WAAW,EACXC,OAAO,I,EAGTC,U,sBAAW,8BAAAC,EAAA,sEAEHC,IAAMC,IAAI,4DAFP,gBACUJ,EADV,EACFK,KAAMA,KAAML,OAEnBM,QAAQC,IAAIP,EAAO,GAAGQ,IACtB,EAAKC,SAAS,CAACT,SAAQD,WAAU,IAJxB,2C,uDAOX,WACEW,KAAKT,c,oBAIP,WAAS,IAAD,EACuBS,KAAKZ,MAAxBC,EADJ,EACIA,UAAUC,EADd,EACcA,OACpB,OACE,yBAASV,UAAU,YAAnB,SACI,qBAAKA,UAAU,UAAf,SACGS,EACC,8BAAK,8CAEL,qBAAKT,UAAU,SAAf,SACGU,EAAOP,KAAI,SAACkB,GAGX,OAFEL,QAAQC,IAAII,EAAMH,IAClBF,QAAQC,IAAII,EAAM1B,MAElB,cAAC,EAAD,CAEAA,KAAM0B,EAAM1B,KACZC,MAAOyB,EAAMzB,MACbC,QAASwB,EAAMxB,QACfC,OAAQuB,EAAMC,mBACdvB,OAAQsB,EAAMtB,QALTsB,EAAMH,iB,GAhCbK,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.23e7966a.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport './Movie.css';\nfunction Movie({key,year,title,summary,poster,genres}){\n    return (\n        <div className=\"movie\" key={key}>\n             <h4 className=\"movie__title\">{title}</h4>\n             <span className=\"movie__year\"><h6>{year}</h6></span>\n             <img className=\"movie__poster\"src={poster} alt={title} title={title}></img>\n             <div className=\"movie__genres\">{genres.map((genre,i)=>{return <li key={i}>{genre}</li>})}</div>\n             <div className=\"movie__summary\">{summary.slice(0,140)}...</div>\n        </div>\n    )\n}\nMovie.propTypes={\n    id:PropTypes.number.isRequired,\n    year:PropTypes.number.isRequired,\n    title:PropTypes.string.isRequired,\n    summary:PropTypes.string.isRequired,\n    poster:PropTypes.string.isRequired,\n    genres:PropTypes.arrayOf(PropTypes).isRequired\n};\nexport default Movie;","import './App.css';\nimport './Movie.css';\nimport React, { Component } from 'react';\nimport Movie from './Movie';\nimport axios from \"axios\";\n\n\nclass App extends Component{\n  state={\n    isLoading: true,\n    movies:[]\n  };\n\n  getMovies= async ()=>{\n    const {data:{data:{movies}}}=\n    await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\n    console.log(movies[0].id);\n    this.setState({movies, isLoading:false});\n\n  }\n  componentDidMount(){\n    this.getMovies();\n\n  }\n\n  render(){\n      const { isLoading,movies }=this.state;\n    return(\n      <section className=\"container\">\n          <div className=\"wrapper\">\n            {isLoading ? (\n              <div><h2>Loading...</h2></div>\n            ):(\n              <div className=\"movies\">\n                {movies.map((movie)=>{\n                    console.log(movie.id);\n                    console.log(movie.year);\n                  return(\n                    <Movie \n                    key={movie.id}\n                    year={movie.year}\n                    title={movie.title}\n                    summary={movie.summary}\n                    poster={movie.medium_cover_image}\n                    genres={movie.genres}\n                    />\n                  )\n\n                })}\n\n              </div>\n\n            )}\n            \n              \n          </div>\n\n      </section>\n    )\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}